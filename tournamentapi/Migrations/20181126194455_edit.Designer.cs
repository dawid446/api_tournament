// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tournamentapi.Models;

namespace tournamentapi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20181126194455_edit")]
    partial class edit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("tournamentapi.Models.Match", b =>
                {
                    b.Property<int>("MatchID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Queue");

                    b.Property<int?>("Score");

                    b.Property<int?>("Score1");

                    b.Property<string>("TeamName");

                    b.Property<int>("TeamName1");

                    b.Property<int>("TournamentID");

                    b.Property<bool>("isBreak");

                    b.Property<bool>("isPlayed");

                    b.HasKey("MatchID");

                    b.HasIndex("TournamentID");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("tournamentapi.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TournamentName");

                    b.HasKey("TournamentID");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("tournamentapi.Models.Match", b =>
                {
                    b.HasOne("tournamentapi.Models.Tournament", "Tournament")
                        .WithMany("Match")
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
